{"version":3,"sources":["views/prashant/services/userServices.js","views/prashant/addForm.jsx"],"names":["apiEndPoint","apiUrl","apiEnd","tokenStr","localStorage","getItem","register","user","http","post","firstName","lastName","username","email","password","role_name","headers","Register","state","allUser","confermPassword","errors","value1","handleSubmit","e","a","preventDefault","validate","error1","sts","Object","values","map","n1","sts1","filter","length","keys","userServices","response","status","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","props","history","push","error","data","message","setState","errs","trim","axios","validateInput","currentTarget","name","value","RegExp","test","handlechange","errString","input","conf","handleReset","this","xs","md","newestOnTop","rtl","pauseOnFocusLoss","action","method","className","htmlFor","type","onChange","placeholder","autoComplete","color","custom","id","required","size","onClick","Component"],"mappings":"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","file":"static/js/64.5c5a744d.chunk.js","sourcesContent":["import http from \"./httpServices\";\r\nimport apiUrl from \"../config.json\";\r\n\r\nconst apiEndPoint=apiUrl.apiEnd+\"/signup\";\r\nconst tokenStr=localStorage.getItem(\"token\")\r\nexport function register(user){\r\n    return http.post(apiEndPoint,{\r\n                        firstName:user.firstName,\r\n                        lastName:user.lastName,\r\n                        username:user.username,\r\n                        email:user.email,\r\n                        password:user.password,\r\n                        role_name:user.role_name},{ headers: {\"Authorization\" : `Bearer ${tokenStr}`} })\r\n}","import React, { Component } from 'react';\r\nimport * as userServices from \"./services/userServices\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport apiUrl from \"./config.json\";\r\nimport axios from \"axios\";\r\nimport auth from \"./services/authServices\";\r\nimport http from \"./services/httpServices\"\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {\r\n  Redirect,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow,\r\n  CSelect,\r\n  CCardHeader,\r\n  CFormGroup,\r\n  CLabel,\r\n  CFormText,\r\n  CCardFooter\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nclass Register extends Component {\r\n  state = {\r\n    allUser: [],\r\n    user: { firstName: \"\", lastName: \"\", username: \"\", email: \"\", password: \"\", role_name: \"\" },\r\n    confermPassword: \"\",\r\n    errors: {},\r\n    value1: \"valid\",\r\n  }\r\n\r\n\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    // const error1={...this.state.errors};\r\n    const error1 = await this.validate();\r\n    const { user, errors } = this.state;\r\n   \r\n    const sts = Object.values(errors).map(n1 => n1 !== \"\")\r\n    const sts1 = sts.filter(n1 => n1 == true)\r\n    if (sts1.length === 0 && Object.keys(error1).length === 0) {\r\n      //  console.log(\"prbhjsbjjsdsjdjdsjk\")\r\n      const response = await userServices.register(user)\r\n      \r\n      if (response.status === 200) {\r\n        toast.success(\"Succuessfully created\", {\r\n          position: \"top-right\",\r\n          autoClose: 7000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n        this.props.history.push(\"/manage\")\r\n\r\n      } else {\r\n\r\n        toast.error(response.data.message, {\r\n          position: \"top-right\",\r\n          autoClose: 7000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n        //alert(err.response.data.error) \r\n\r\n      }\r\n      //  this.props.history.push(\"/manage\")\r\n\r\n\r\n    } else {\r\n      if (sts1.length === 0) {\r\n        // console.log(\"djfnjkfdnj\")\r\n        this.setState({ errors: error1 })\r\n      }\r\n      toast.error(\"Please enter all the data in the correct form\", {\r\n        position: \"top-right\",\r\n        autoClose: 7000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n    //   localStorage.setItem(\"token\",response.headers[\"x-auth-token\"])\r\n    //  window.location=\"/\";\r\n\r\n  };\r\n  validate = async() => {\r\n    let errs = {};\r\n    if (!this.state.user.firstName.trim()) errs.firstName = \"First name is required\";\r\n    if (!this.state.user.lastName.trim()) errs.lastName = \"Last name is required\";\r\n    if (!this.state.user.username.trim()) errs.username = \"Username is required\";\r\n    if (this.state.user.username.trim()){ \r\n      const data1 = await axios.post(apiUrl.apiEnd + \"/useravailability\",{username:this.state.user.username.trim()})\r\n     \r\n     if(data1.status==205){ \r\n       \r\n       errs.username = \"Username is already exist\";\r\n      }\r\n      // return \"Username is should be greater than 3 and less than 15 character\";\r\n    }\r\n    if (!this.state.user.email.trim()) errs.email = \"Email must be required\";\r\n    if (!this.state.user.password.trim()) errs.password = \"Password is required\";\r\n    if (!this.state.user.role_name.trim()) errs.role_name = \"Role name is required\";\r\n    if (!this.state.confermPassword.trim()) errs.confermPassword = \"Confirm Password is required\";\r\n    return errs;\r\n  };\r\n  validateInput = (e) => {\r\n    switch (e.currentTarget.name) {\r\n      case \"firstName\":\r\n        \r\n        if (!e.currentTarget.value.trim()) return \"First name is must be  required\";\r\n        if (e.currentTarget.value.trim().length < 4 || e.currentTarget.value.trim().length > 15) return \"First name is should be greater than 3 and less than 15 character\";\r\n        if (!RegExp(/^[A-Za-z]+$/).test(e.currentTarget.value)) return \"First name is must be  valid\";\r\n        break;\r\n      case \"lastName\":\r\n        if (!e.currentTarget.value.trim()) return \"Last name is must be  required\";\r\n        if (e.currentTarget.value.trim().length < 4 || e.currentTarget.value.trim().length > 15) return \"Last name is should be greater than 3 and less than 15 character\";\r\n        if (!RegExp(/^[A-Za-z]+$/).test(e.currentTarget.value)) return \"Last name is must be  valid\";\r\n        break;\r\n      case \"username\":\r\n        if (!e.currentTarget.value.trim()) return \"Username is must be  required\";\r\n        if (e.currentTarget.value.trim().length < 4 || e.currentTarget.value.trim().length > 15) return \"Username is should be greater than 3 and less than 15 character\";\r\n        // if (e.currentTarget.value.trim().length < 4 ){ \r\n        //   const data1 = await axios.post(apiUrl.apiEnd + \"/useravailability\",{username:e.currentTarget.value.trim()})\r\n         \r\n        //  if(data1.status==205){ \r\n           \r\n        //    return \"Username is already exist\";\r\n        //   }\r\n        //   // return \"Username is should be greater than 3 and less than 15 character\";\r\n        // }\r\n        break;\r\n      case \"email\":\r\n        if (!e.currentTarget.value.trim()) return \"Email is must be  required\";\r\n        if (!RegExp(/^((?!\\.)[\\w-_.]*[^.])(@\\w+)(\\.\\w+(\\.\\w+)?[^.\\W])$/gm).test(e.currentTarget.value)) return \"Enter Email is must be  valid\";\r\n        break;\r\n\r\n      case \"password\":\r\n        if (!e.currentTarget.value.trim())\r\n          return \"password must be required\";\r\n        break;\r\n      case \"confermPassword\":\r\n        if (e.currentTarget.value.trim() !== this.state.user.password)\r\n          return \"password must be same\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  handlechange = e => {\r\n    let errString = this.validateInput(e);\r\n    const errors = { ...this.state.errors };\r\n    errors[e.currentTarget.name] = errString;\r\n    const data = { ...this.state.user };\r\n\r\n    const { currentTarget: input } = e\r\n    if (input.name === \"confermPassword\") {\r\n      var conf = input.value;\r\n      this.setState({ confermPassword: conf, errors: errors });\r\n    } else {\r\n      data[input.name] = input.value;\r\n      // console.log(errors)\r\n      this.setState({ user: data, errors: errors });\r\n    }\r\n    // this.setState({errors:errors });\r\n  };\r\n  handleReset=()=>{\r\n    const user1={ firstName: \"\", lastName: \"\", username: \"\", email: \"\", password: \"\", role_name: \"\" }\r\n    this.setState({user:user1,confermPassword:\"\",errors:{}})\r\n  }\r\n  render() {\r\n    const { user, value1, errors } = this.state\r\n    // console.log(errors)\r\n    return (\r\n      // <div className=\"c-app c-default-layout \">\r\n      //   <CContainer>\r\n      //     <CRow className=\"bg-white\">\r\n      //       <CCol md=\"9\" lg=\"8\" xl=\"8\">\r\n      //         {/* <CCard className=\"mx-4\"> */}\r\n      //           <CCardBody className=\"p-4\">\r\n      //             <CForm >\r\n\r\n      //               <ToastContainer\r\n      //                 position=\"top-right\"\r\n      //                 autoClose={5000}\r\n      //                 hideProgressBar={false}\r\n      //                 newestOnTop={false}\r\n      //                 closeOnClick\r\n      //                 rtl={false}\r\n      //                 pauseOnFocusLoss\r\n      //                 draggable\r\n      //                 pauseOnHover\r\n      //               />\r\n      //               {/* Same as */}\r\n      //               <ToastContainer />\r\n      //               <CInputGroup >\r\n      //                 <CInputGroupPrepend>\r\n      //                   <CInputGroupText>\r\n      //                     First Name\r\n      //                 </CInputGroupText>\r\n      //                 </CInputGroupPrepend>\r\n      //                 {/* <CInput valid id=\"inputIsValid\" /> */}\r\n      //                 <CInput type=\"text\" name=\"firstName\" value={user.firstName} onChange={this.handlechange} placeholder=\"First name\" autoComplete=\"firstName\" />\r\n\r\n      //               </CInputGroup>\r\n      //               {errors.firstName ? (\r\n      //                 <span className=\"alert text-danger\">{errors.firstName}</span>\r\n      //               ) : (\r\n      //                 \"\"\r\n      //               )}\r\n      //               <CInputGroup className=\"mt-3\">\r\n      //                 <CInputGroupPrepend>\r\n      //                   <CInputGroupText>\r\n      //                     Last Name\r\n      //                 </CInputGroupText>\r\n      //                 </CInputGroupPrepend>\r\n      //                 <CInput value={user.lastName} name=\"lastName\" onChange={this.handlechange} type=\"text\" placeholder=\"Last name\" autoComplete=\"lastName\" />\r\n      //               </CInputGroup>\r\n      //               {errors.lastName ? (\r\n      //                 <span className=\"alert text-danger\">{errors.lastName}</span>\r\n      //               ) : (\r\n      //                 \"\"\r\n      //               )}\r\n      //               <CInputGroup className=\"mt-3\">\r\n      //                 <CInputGroupPrepend>\r\n      //                   <CInputGroupText>\r\n      //                     <CIcon name=\"cil-user\" />\r\n      //                   </CInputGroupText>\r\n      //                 </CInputGroupPrepend>\r\n      //                 <CInput value={user.username} name=\"username\" onChange={this.handlechange} type=\"text\" placeholder=\"Username\" autoComplete=\"username\" />\r\n\r\n      //               </CInputGroup>\r\n      //               {errors.username ? (\r\n      //                 <span className=\"alert text-danger\">{errors.username}</span>\r\n      //               ) : (\r\n      //                 \"\"\r\n      //               )}\r\n      //               <CInputGroup className=\"mt-3\">\r\n      //                 <CInputGroupPrepend>\r\n      //                   <CInputGroupText>@</CInputGroupText>\r\n      //                 </CInputGroupPrepend>\r\n      //                 <CInput value={user.email} name=\"email\" onChange={this.handlechange} type=\"email\" placeholder=\"Email\" autoComplete=\"email\" />\r\n      //               </CInputGroup>\r\n      //               {errors.email ? (\r\n      //                 <span className=\"alert text-danger\">{errors.email}</span>\r\n      //               ) : (\r\n      //                 \"\"\r\n      //               )}\r\n      //               <CInputGroup className=\"mt-3\">\r\n      //                 <CInputGroupPrepend>\r\n      //                   <CInputGroupText>\r\n      //                     Role Name\r\n      //                 </CInputGroupText>\r\n      //                 </CInputGroupPrepend>\r\n      //                 <CSelect custom id=\"role_name\" name=\"role_name\" value={user.role_name} onChange={this.handlechange}>\r\n      //                   <option value=\"0\">Please select role name</option>\r\n      //                   <option value=\"Agent\">Agent</option>\r\n      //                   <option value=\"Medly\">Medly</option>\r\n      //                 </CSelect>\r\n      //               </CInputGroup>\r\n      //               {errors.role_name ? (\r\n      //                 <span className=\"alert text-danger\">{errors.role_name}</span>\r\n      //               ) : (\r\n      //                 \"\"\r\n      //               )}\r\n      //               <CInputGroup className=\"mt-3\">\r\n      //                 <CInputGroupPrepend>\r\n      //                   <CInputGroupText>\r\n      //                     <CIcon name=\"cil-lock-locked\" />\r\n      //                   </CInputGroupText>\r\n      //                 </CInputGroupPrepend>\r\n      //                 <CInput value={user.password} name=\"password\" onChange={this.handlechange} type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" />\r\n      //               </CInputGroup>\r\n      //               {errors.password ? (\r\n      //                 <span className=\"alert text-danger\">{errors.password}</span>\r\n      //               ) : (\r\n      //                 \"\"\r\n      //               )}\r\n      //               <CInputGroup className=\"mt-3 mb-4\">\r\n      //                 <CInputGroupPrepend>\r\n      //                   <CInputGroupText>\r\n      //                     <CIcon name=\"cil-lock-locked\" />\r\n      //                   </CInputGroupText>\r\n      //                 </CInputGroupPrepend>\r\n      //                 <CInput value={this.state.confermPassword} name=\"confermPassword\" onChange={this.handlechange} type=\"password\" placeholder=\"Confirm  password\" autoComplete=\"new-password\" />\r\n      //               </CInputGroup>\r\n      //               {errors.confermPassword ? (\r\n      //                 <span className=\"alert text-danger\">{errors.confermPassword}</span>\r\n      //               ) : (\r\n      //                 \"\"\r\n      //               )}\r\n      //               <CButton color=\"success\" block onClick={this.handleSubmit}>Add Moderator</CButton>\r\n      //             </CForm>\r\n      //           </CCardBody>\r\n\r\n      //         {/* </CCard> */}\r\n      //       </CCol>\r\n      //     </CRow>\r\n      //   </CContainer>\r\n      // </div>\r\n      <CCol xs=\"12\" md=\"12\">\r\n         <ToastContainer\r\n                      position=\"top-right\"\r\n                      autoClose={5000}\r\n                      hideProgressBar={false}\r\n                      newestOnTop={false}\r\n                      closeOnClick\r\n                      rtl={false}\r\n                      pauseOnFocusLoss\r\n                      draggable\r\n                      pauseOnHover\r\n                    />\r\n       <CCard>\r\n            \r\n            <CCardBody>\r\n              <CForm action=\"\" method=\"post\" >\r\n                <CRow>\r\n                  <CCol>\r\n                <CFormGroup className=\"pr-1\">\r\n                  <CLabel htmlFor=\"exampleInputName2\" className=\"pr-1\">First Name</CLabel>\r\n                  <CInput type=\"text\" name=\"firstName\" value={user.firstName} onChange={this.handlechange} placeholder=\"First name\" autoComplete=\"firstName\"  />\r\n                  {errors.firstName ? (\r\n                      <CFormText color=\"danger\" className=\"help-block\">{errors.firstName}</CFormText>\r\n                     ) : (\r\n                       \"\"\r\n                     )}\r\n                  \r\n                </CFormGroup>\r\n                </CCol>\r\n                <CCol>\r\n                <CFormGroup className=\"pr-1\">\r\n                  <CLabel htmlFor=\"exampleInputEmail2\" className=\"pr-1\">Last Name</CLabel>\r\n                  <CInput value={user.lastName} name=\"lastName\" onChange={this.handlechange} type=\"text\" placeholder=\"Last name\" autoComplete=\"lastName\"/>\r\n                  {errors.lastName ? (\r\n                      <CFormText color=\"danger\" className=\"help-block\">{errors.lastName}</CFormText>\r\n                     ) : (\r\n                       \"\"\r\n                     )}\r\n                </CFormGroup>\r\n                </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                  <CCol>\r\n                <CFormGroup className=\"pr-1\">\r\n                  <CLabel htmlFor=\"exampleInputName2\" className=\"pr-1\">Username</CLabel>\r\n                  <CInput value={user.username} name=\"username\" onChange={this.handlechange} type=\"text\" placeholder=\"Username\" autoComplete=\"username\" />\r\n                  {errors.username ? (\r\n                      <CFormText color=\"danger\" className=\"help-block\">{errors.username}</CFormText>\r\n                     ) : (\r\n                       \"\"\r\n                     )}\r\n                </CFormGroup>\r\n                </CCol>\r\n                <CCol>\r\n                <CFormGroup className=\"pr-1\">\r\n                  <CLabel htmlFor=\"exampleInputEmail2\" className=\"pr-1\">Role</CLabel>\r\n                  <CSelect custom id=\"role_name\" name=\"role_name\" value={user.role_name} onChange={this.handlechange}>\r\n                       <option value=\"\" >Please select role name</option>\r\n                         <option value=\"Agent\">Meest</option>\r\n                        <option value=\"Medly\">Medley</option>\r\n                      </CSelect>\r\n                      {errors.role_name ? (\r\n                      <CFormText color=\"danger\" className=\"help-block\">{errors.role_name}</CFormText>\r\n                     ) : (\r\n                       \"\"\r\n                     )}\r\n                </CFormGroup>\r\n                </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                <CCol>\r\n                <CFormGroup className=\"pr-1\">\r\n                  <CLabel htmlFor=\"exampleInputName2\" className=\"pr-1\">Email</CLabel>\r\n                  <CInput value={user.email} name=\"email\" onChange={this.handlechange} type=\"email\" placeholder=\"Email\" autoComplete=\"email\" required />\r\n                  {errors.email ? (\r\n                      <CFormText color=\"danger\" className=\"help-block\">{errors.email}</CFormText>\r\n                     ) : (\r\n                       \"\"\r\n                     )}\r\n                </CFormGroup>\r\n                </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                  <CCol>\r\n                <CFormGroup className=\"pr-1\">\r\n                  <CLabel htmlFor=\"exampleInputName2\" className=\"pr-1\">Password</CLabel>\r\n                  <CInput value={user.password} name=\"password\" onChange={this.handlechange} type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" required />\r\n                  {errors.password ? (\r\n                      <CFormText color=\"danger\" className=\"help-block\">{errors.password}</CFormText>\r\n                     ) : (\r\n                       \"\"\r\n                     )}\r\n                </CFormGroup>\r\n                </CCol>\r\n                <CCol>\r\n                <CFormGroup className=\"pr-1\">\r\n                  <CLabel htmlFor=\"exampleInputEmail2\" className=\"pr-1\">Confirm Password</CLabel>\r\n                  <CInput value={this.state.confermPassword} name=\"confermPassword\" onChange={this.handlechange} type=\"password\" placeholder=\"Confirm  password\" autoComplete=\"new-password\" required />\r\n                  {errors.confermPassword ? (\r\n                      <CFormText color=\"danger\" className=\"help-block\">{errors.confermPassword}</CFormText>\r\n                     ) : (\r\n                       \"\"\r\n                     )}\r\n                </CFormGroup>\r\n                </CCol>\r\n                </CRow>\r\n              </CForm>\r\n            </CCardBody>\r\n            <CCardFooter>\r\n              <CButton type=\"submit\" size=\"sm\" color=\"success\"  onClick={this.handleSubmit} className=\"mr-2\"><CIcon name=\"cil-scrubber\"  /> Add Moderator</CButton>\r\n              <CButton type=\"reset\" size=\"sm\" color=\"danger\" onClick={this.handleReset}><CIcon name=\"cil-ban\" /> Reset</CButton>\r\n            </CCardFooter>\r\n          </CCard>\r\n      </CCol>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Register\r\n"],"sourceRoot":""}